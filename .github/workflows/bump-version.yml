# .github/workflows/bump-version.yml
name: Bump Version

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump (major, minor, patch):'
        required: true
        default: 'patch'

jobs:
  approve:
    name: Approve version bump
    environment: restricted
    runs-on: ubuntu-latest
    steps:
      - name: Request approval
        run: echo "Requesting approval for version bump"

  version-bump:
    name: Bump Version
    needs: approve
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed to push tags
          token: ${{ secrets.BOT_PAT }}  # Authenticate as the bot - use a PAT with repo, workflow, and write:packages permissions for someone on the laser-actions team

      - name: Set up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.BOT_PAT }}@github.com/${{ github.repository }}.git

      - name: Install bump-my-version
        run: python -m pip install bump-my-version

      - name: Bump version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # may not be necessary since we are using a PAT
        run: |
          OLD_VERSION=$(grep '^version =' pyproject.toml | sed -E "s/.*= *[\"'](.*)[\"']/\1/")
          echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
          bump-my-version bump ${{ github.event.inputs.version_type }} --no-commit --no-tag
          NEW_VERSION=$(grep '^version =' pyproject.toml | sed -E "s/.*= *[\"'](.*)[\"']/\1/")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          git add --all
          git commit -m "Bump ${{ github.event.inputs.version_type }} version ${{ env.OLD_VERSION }} -> ${{ env.NEW_VERSION }}"
          git tag "v$NEW_VERSION"
          git push origin HEAD
          git push origin --tags
