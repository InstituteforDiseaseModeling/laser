# .github/workflows/test-bump-release.yml
name: Test, Bump, Build, and Release (Publish)

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump (major, minor, patch):'
        required: true
        default: 'patch'

jobs:
  approve:
    name: Approve version bump
    environment: restricted
    runs-on: ubuntu-latest
    steps:
      - name: Request approval
        run: echo "Requesting approval for version bump"

  # test:
  #   name: Test on ${{ matrix.os }} / py${{ matrix.python-version }} / ${{ matrix.architecture }}
  #   needs: approve
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, windows-latest]
  #       python-version: ["3.9", "3.10", "3.11", "3.12"]
  #       architecture: [x64]
  #       include:
  #         # Add arm64 for macOS
  #         - os: macos-latest
  #           python-version: "3.9"
  #           architecture: arm64
  #         - os: macos-latest
  #           python-version: "3.10"
  #           architecture: arm64
  #         - os: macos-latest
  #           python-version: "3.11"
  #           architecture: arm64
  #         - os: macos-latest
  #           python-version: "3.12"
  #           architecture: arm64
  #         # Add x64 for macOS
  #         - os: 'macos-13'
  #           python-version: "3.9"
  #           architecture: x64
  #         - os: 'macos-13'
  #           python-version: "3.10"
  #           architecture: x64
  #         - os: macos-latest
  #           python-version: "3.11"
  #           architecture: x64
  #         - os: macos-latest
  #           python-version: "3.12"
  #           architecture: x64

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         architecture: ${{ matrix.architecture }}

  #     - name: Install build dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install build

  #     - name: Build package
  #       run: python -m build

  #     - name: Run tests
  #       run: |
  #         pip install .
  #         pip install scipy pytest pytest-cov
  #         pytest

  version-bump:
    name: Bump Version
    needs: approve
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed to push tags
          token: ${{ secrets.BOT_PAT }}  # Authenticate as the bot

      - name: Set up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.BOT_PAT }}@github.com/${{ github.repository }}.git

      - name: Install bump-my-version
        run: python -m pip install bump-my-version

      - name: Bump version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          bump-my-version bump ${{ github.event.inputs.version_type }} --no-commit --no-tag
          VERSION=$(grep '^version =' pyproject.toml | sed -E "s/.*= *[\"'](.*)[\"']/\1/")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          git tag "v$VERSION"
          git push origin HEAD
          git push origin --tags

  build:
    name: Build on (${{ matrix.os }})
    needs: version-bump
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python (host, for cibuildwheel CLI)
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install build tools
        run: python -m pip install -U pip build pytest cibuildwheel

      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_SKIP: "pp* *-musllinux_*"

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*.whl

  publish:
    name: Publish to PyPI and GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download all built wheels
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten dist directory
        run: |
          mkdir final_dist
          find dist -name '*.whl' -exec mv {} final_dist/ \;

      - name: Extract version
        id: get_version
        run: |
          VERSION=$(grep '^version =' pyproject.toml | sed -E "s/.*= *[\"'](.*)[\"']/\1/")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release with gh CLI
        run: |
          gh release create "v${{ env.VERSION }}" \
            --title "Release v${{ env.VERSION }}" \
            --notes "Automated release of version v${{ env.VERSION }}" \
            final_dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          attestations: false
          skip_existing: false
          packages_dir: final_dist
          verbose: true
