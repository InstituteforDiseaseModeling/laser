from pathlib import Path
import numpy as np

from iso_codes_mosaic import sorted_by_pop as sbp

# Define number of synthetic nodes and ranges for population and birth rate
num_nodes = 41
population_range = (1e6, 1e7)  # Population between 1,000,000 and 10,000,000
birth_rate_range = (20, num_nodes)  # Birth rate between 20 and num_nodes

# Seed for reproducibility
np.random.seed(42)

synthetic_lgas = {'SYNTHETIC_NODE_NGA': ((23000000, 2024), (9.61029352034213, 8.147714845256194), 27.87), 'SYNTHETIC_NODE_ETH': ((12325394, 2024), (8.729389557048396, 39.91490288654428), 39.97), 'SYNTHETIC_NODE_COD': ((8556944, 2024), (-3.51, 23.60), 35.37), 'SYNTHETIC_NODE_ZAF': ((6605015, 2024), (-28.55361930679731, 24.75252746489084), 32.57), 'SYNTHETIC_NODE_TZA': ((5403247, 2024), (-6.355794440041147, 34.81832206060381), 23.28), 'SYNTHETIC_NODE_KEN': ((4585552, 2024), (0.6899182318376179, 37.95309411262371), 23.28), 'SYNTHETIC_NODE_UGA': ((3991531, 2024), (1.2821729218416205, 32.34371768463123), 21.22), 'SYNTHETIC_NODE_SDN': ((3539540, 2024), (15.67060230984256, 29.951458283594064), 38.19), 'SYNTHETIC_NODE_GHA': ((3183534, 2024), (7.94530467243628, -1.219233362526581), 32.62), 'SYNTHETIC_NODE_MOZ': ((2895528, 2024), (-17.525230309488748, 35.208577031290176), 34.87), 'SYNTHETIC_NODE_CIV': ((2657507, 2024), (7.536779279421307, -5.571710194917734), 20.43), 'SYNTHETIC_NODE_CMR': ((2457336, 2024), (6.294168487480992, 12.948474142398265), 40.37), 'SYNTHETIC_NODE_AGO': ((2286540, 2024), (-12.167424062667942, 17.651768783079), 37.48), 'SYNTHETIC_NODE_NER': ((2139008, 2024), (17.08105392407292, 8.86863247002646), 24.46), 'SYNTHETIC_NODE_BFA': ((2010229, 2024), (12.108709036312735, -1.6932816211842323), 23.82), 'SYNTHETIC_NODE_MWI': ((1896792, 2024), (-13.128986464184024, 34.23441182298881), 23.85), 'SYNTHETIC_NODE_SEN': ((1796072, 2024), (14.228861491763402, -14.610875368352303), 26.39), 'SYNTHETIC_NODE_MLI': ((1706013, 2024), (17.168146208584837, -4.346399841781153), 31.02), 'SYNTHETIC_NODE_ZMB': ((1624985, 2024), (-13.162832953186246, 27.75521363430896), 29.07), 'SYNTHETIC_NODE_ZWE': ((1551675, 2024), (-18.92700121981475, 29.717829640720844), 26.12), 'SYNTHETIC_NODE_RWA': ((1485013, 2024), (-2.014687460047154, 29.91943968176408), 32.85), 'SYNTHETIC_NODE_TCD': ((1424122, 2024), (15.283493546654505, 18.427113900363025), 22.93), 'SYNTHETIC_NODE_GIN': ((1368273, 2024), (10.255986541378112, -10.986948848040218), 26.14), 'SYNTHETIC_NODE_SOM': ((1316854, 2024), (6.524534573103924, 45.40037867243972), 27.69), 'SYNTHETIC_NODE_BDI': ((1269351, 2024), (-3.261251993278643, 29.88518227845293), 29.58), 'SYNTHETIC_NODE_BEN': ((1225326, 2024), (9.503013199615893, 2.305714528830206), 36.49), 'SYNTHETIC_NODE_SSD': ((1184405, 2024), (7.657782041763295, 30.3851856901788), 24.19), 'SYNTHETIC_NODE_TGO': ((1146266, 2024), (8.660743037717811, 0.8990857571109684), 30.8), 'SYNTHETIC_NODE_SLE': ((1110630, 2024), (8.561330384750587, -11.78656695731115), 32.44), 'SYNTHETIC_NODE_ERI': ((1077255, 2024), (15.005533147667684, 39.2672401449901), 20.98), 'SYNTHETIC_NODE_CAF': ((1045929, 2024), (6.331390033944319, 20.520743419397256), 32.76), 'SYNTHETIC_NODE_LBR': ((1016465, 2024), (6.52012979398834, -9.258988935497618), 23.58), 'SYNTHETIC_NODE_COG': ((988701, 2024), (23.419827574282188, -3.338629596207896), 21.37), 'SYNTHETIC_NODE_MRT': ((962491, 2024), (20.466731212820022, -10.495079045035716), 39.93), 'SYNTHETIC_NODE_LSO': ((937705, 2024), (-29.60168116924817, 28.24475317864227), 40.28), 'SYNTHETIC_NODE_NAM': ((914230, 2024), (-21.90858163281473, 18.16451345845268), 36.98), 'SYNTHETIC_NODE_BWA': ((891961, 2024), (-22.236609002062902, 23.85779956995608), 26.4), 'SYNTHETIC_NODE_GMB': ((870808, 2024), (13.428617959189328, -15.383380385869662), 22.05), 'SYNTHETIC_NODE_GNB': ((850686, 2024), (11.980075324820504, -14.980186756910848), 34.37), 'SYNTHETIC_NODE_GAB': ((831522, 2024), (-0.628448459921234, 11.839410898545754), 29.24), 'SYNTHETIC_NODE_SWZ': ((813246, 2024), (-26.562540935608705, 31.510685746082007), 22.56)}
 


# Define parameters
P1 = 23  # Population of the largest country (Nigeria) in millions, divided by 10
alpha = 0.9  # Power-law exponent
n_countries = num_nodes  # Number of countries to estimate

# Calculate populations
populations = [P1 / (n ** alpha) for n in range(1, n_countries + 1)]

# Display results
for rank, population in enumerate(populations, start=1):
    print(f"Country rank {rank}: Estimated population = {population:.2f} million")

print(synthetic_lgas)

# Example function call for testing
def run():
    print(Path.cwd())
    admin2 = {k:v for k,v in synthetic_lgas.items()}
    print(f"{len(admin2)=}")

    nn_nodes = {k:v for k, v in admin2.items()}
    print(f"{len(nn_nodes)=}")

    initial_populations = np.array([v[0][0] for v in nn_nodes.values()])
    print(f"{len(initial_populations)=}")
    print(f"First 32 populations:\n{initial_populations[0:32]}")
    print(f"{initial_populations.sum()=:,}")

    cbrs = {index: details[2] for index, (details) in enumerate(admin2.values())}

    return nn_nodes, initial_populations, cbrs

#run() # at one point I liked the idea of doing this simply by importing

